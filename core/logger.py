# ------------------------------------------------------------
# Logging and LaTeX Export (clean formatted proof)
# ------------------------------------------------------------
from .proof_kernel import ProofStep


def export_latex(steps: list[ProofStep], goal: str = "1Â·(u+v)=u+v") -> str:
    """
    Export a readable LaTeX proof:
    - Clean title and goal formatting
    - Numbered steps
    - Rule and justification shown neatly on the right
    - No stray xcolor text
    - Proper brace escaping for f-strings
    """
    lines = []
    lines.append(r"\documentclass[12pt]{article}")
    lines.append(r"\usepackage{amsmath, amssymb, xcolor}")
    lines.append(r"\usepackage[margin=1in]{geometry}")
    lines.append(r"\setlength{\parindent}{0pt}")
    lines.append(r"\setlength{\parskip}{0.5em}")
    lines.append(r"\begin{document}")

    # ------------------- Title & Metadata -------------------
    lines.append(r"\begin{center}")
    lines.append(r"\Large\textbf{Vector Space Proof Demonstration}\\[0.5em]")
    lines.append(r"\normalsize\textit{Generated by the Khwarizmi Symbolic System}\\[1em]")
    lines.append(r"\end{center}")

    # ------------------- Goal Statement -------------------
    lines.append(r"\textbf{Goal:} Prove that $" + goal.replace("_", r"\_") + r"$.")
    lines.append(r"\\[1em]")
    lines.append(r"\textbf{Proof:}")
    lines.append(r"\\[0.5em]")
    lines.append(r"\begin{alignat*}{3}")  # left col = step number, middle = equation, right = justification

    # ------------------- Step Loop -------------------
    step_counter = 1
    sub_counter = 0
    last_rule = None

    for s in steps:
        before = s.before.to_latex()
        after = s.after.to_latex()
        rule = s.rule.replace("_", r"\_")
        justification = s.justification.replace("_", r"\_")

        # detect same-rule chaining for substeps
        if s.rule == last_rule:
            label = f"{step_counter}{chr(96 + sub_counter)}"  # 1a, 1b, etc.
            sub_counter += 1
        else:
            step_counter += 1
            sub_counter = 1
            label = f"{step_counter}"
            last_rule = s.rule

        # Normal step
        if s.status == "ok":
            lines.append(
                f"({label})\\;& {before} = {after} "
                f"& \\quad\\textcolor{{gray}}{{[{rule}]}} \\\\"
            )

        # Failed rule step (highlight in red)
        else:
            lines.append(
                f"({label})\\;& \\textcolor{{red}}{{{before}}} "
                f"& \\textcolor{{red}}{{\\textbf{{Failed: {rule}}} "
                f"({justification})}} \\\\"
            )
    # ------------------- Conclusion -------------------
    lines.append(r"\\[1em]")
    lines.append(
        r"&\textbf{Hence, } "
        + steps[-1].after.to_latex()
        + r" = "
        + goal.split('=')[-1]
        + r"\\[1em]"
    )
    lines.append(r"\end{alignat*}")

    # ------------------- Footer -------------------
    lines.append(r"\vfill")
    lines.append(r"\begin{center}")
    lines.append(
        r"\small\textit{Proof log automatically generated by Khwarizmi. All transformations follow registered axioms.}"
    )
    lines.append(r"\end{center}")
    lines.append(r"\end{document}")

    return "\n".join(lines)
